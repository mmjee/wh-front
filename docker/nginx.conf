pid /run/nginx.pid;

worker_processes auto;

events {
    # http://nginx.org/en/docs/events.html
    use                 epoll;
    worker_connections  2048;
    multi_accept        on;
}

http {
    # Speed up file transfers by using sendfile() to copy directly
    # between descriptors rather than using read()/write()
    sendfile on;

    # Tell Nginx not to send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out (adds TCP_CORK)
    # Send the response header and the beginning of a file in one packet
    # Send a file in full packets
    tcp_nopush on;

    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets
    # which collates several smaller packets together into one larger packet
    # thus saving bandwidth at the cost of a nearly imperceptible increase to latency
    tcp_nodelay off;

    send_timeout 30;

    # How long to allow each connection to stay idle;
    # Longer values are better for each individual client, especially SSL
    # But means that worker connections are tied up longer.75
    keepalive_timeout 60;

    keepalive_requests 200;
    # client_header_timeout 20;
    # client_body_timeout 20;
    reset_timedout_connection on;

    types_hash_max_size 2048;

    server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    # default_type application/octet-stream;
    default_type text/html;
    charset UTF-8;
    # Enable Gzip compression
    gzip on;

    # This should be turned on if pre-compressed copies (.gz) of static files exist
    # If NOT it should be left off as it will cause extra I/O
    # default: off
    # gzip_static on;

    # Do NOT compress anything smaller than 256 bytes
    gzip_min_length 256;

    # Fuck IE6
    gzip_disable "msie6";

    server {
        listen   3001;
        listen   [::]:3001 default ipv6only=on;

        root /app/dist;

        server_name _; # all hostnames
        location / {
            try_files $uri /index.html =404;
            }
            location /api {
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_pass http://backend:3000;
            }
    }
}
